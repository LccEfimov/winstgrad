import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, WebAppInfo,
    InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup
)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0") or 0)

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
log = logging.getLogger("winstgrad.bot")

def _require_env():
    missing = []
    if not BOT_TOKEN:   missing.append("TELEGRAM_BOT_TOKEN")
    if not WEBAPP_URL:  missing.append("WEBAPP_URL")
    if missing:
        raise SystemExit(f"env missing: {', '.join(missing)}")

async def register_user(user):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–º–æ–ª—á–∞, –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)."""
    if not WEBAPP_URL:
        return
    payload = {
        "telegram_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "language_code": getattr(user, "language_code", None),
        "is_premium": getattr(user, "is_premium", False),
    }
    try:
        async with aiohttp.ClientSession() as s:
            async with s.post(f"{WEBAPP_URL}/app/api/telegram/register",
                              json=payload, timeout=10) as r:
                # –±—ã–≤–∞—é—Ç HTML-–æ—Ç–≤–µ—Ç—ã, —á–∏—Ç–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
                try:
                    j = await r.json(content_type=None)
                    if not j.get("success"):
                        log.warning("register failed: %s", j)
                except Exception:
                    txt = (await r.text())[:300].replace("\n", " ")
                    log.warning("register non-json [%s]: %s", r.status, txt)
    except Exception as e:
        log.error("register error: %s", e)

async def main():
    _require_env()
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
    try:
        await bot.set_my_commands([
            ("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("open",  "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
            ("admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            ("id",    "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
        ])
    except Exception:
        pass

    @dp.message(CommandStart())
    async def start(m: Message):
        # web_app-–∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        if m.chat.type != "private":
            await m.answer(
                "–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, —Ç–∞–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ WebApp:\n"
                "https://t.me/WinstGradBot?start=app"
            )
            return
        await register_user(m.from_user)
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(
                text="üèóÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=WEBAPP_URL + "/app/")
            )]],
            resize_keyboard=True
        )
        await m.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏–Ω—Å—Ç-–ì—Ä–∞–¥.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=kb
        )

    @dp.message(Command("open"))
    async def open_app(m: Message):
        if m.chat.type != "private":
            await m.answer(
                "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.\n"
                "–û—Ç–∫—Ä–æ–π—Ç–µ: https://t.me/WinstGradBot?start=app"
            )
            return
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(
                text="üèóÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=WEBAPP_URL + "/app/")
            )]],
            resize_keyboard=True
        )
        await m.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=kb)

    @dp.message(Command("admin"))
    async def admin(m: Message):
        if m.chat.type != "private":
            await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return
        if m.from_user and m.from_user.id == ADMIN_ID:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    web_app=WebAppInfo(url=WEBAPP_URL + "/app/?goto=admin")
                )]
            ])
            await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
        else:
            await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    @dp.message(Command("id"))
    async def my_id(m: Message):
        await m.answer(f"–í–∞—à Telegram ID: <code>{m.from_user.id}</code>")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
